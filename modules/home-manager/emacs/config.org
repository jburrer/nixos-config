#+TITLE: N3MO'S EMACS CONFIG 
#+AUTHOR: n3mo
#+DESCRIPTION: my personal emacs config, very much a WIP
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#evil-mode][EVIL MODE]]
  - [[#general-keybindings][GENERAL KEYBINDINGS]]
- [[#fonts][FONTS]]
- [[#gui-tweaks][GUI TWEAKS]]
  - [[#disable-stuff][DISABLE STUFF]]
  - [[#line-numbers-truncating-and-indentation][LINE NUMBERS, TRUNCATING, AND INDENTATION]]
  - [[#smooth-scrolling][SMOOTH SCROLLING]]
  - [[#rainbow-delimiters][RAINBOW DELIMITERS]]
- [[#org-mode][ORG MODE]]
  - [[#table-of-contents][TABLE OF CONTENTS]]
  - [[#org-bullets][ORG-BULLETS]]
- [[#which-key][WHICH-KEY]]
- [[#latex][LATEX]]
  - [[#auctex][AUCTEX]]
  - [[#pdf-tools][PDF-TOOLS]]
- [[#misc][MISC]]
  - [[#transient-mark-mode][TRANSIENT MARK MODE]]
  - [[#catppuccin-theme][CATPPUCCIN THEME]]
  - [[#vterm][VTERM]]
  - [[#nix-treesitter][NIX TREESITTER]]
  - [[#highlight-indent-guides][HIGHLIGHT INDENT GUIDES]]

* IMPORTANT PROGRAMS TO LOAD FIRST

** EVIL MODE
#+begin_src emacs-lisp
  (use-package evil
               :ensure t
               :init
               (setq evil-want-keybinding nil
                     evil-vsplit-window-right t
                     evil-split-window-below t
                     evil-emacs-state-modes nil
                     evil-insert-state-modes nil
                     evil-motion-state-modes nil)
               (evil-mode))

  (use-package evil-collection
               :ensure t
               :after evil
               :config
               (evil-collection-init))
#+end_src 

** GENERAL KEYBINDINGS
#+begin_src emacs-lisp
        (use-package general
                     :config
                     (general-evil-setup)
                     (general-create-definer n3mo/leader-keys
                                             :states '(normal insert visual emacs)
                                             :keymaps 'override
                                             :prefix "SPC"
                                             :global-prefix "M-SPC") 
                     (n3mo/leader-keys "e" '(:ignore t :wk "buffer")
                                       "eb" '(switch-to-buffer :wk "Switch buffer")
                                       "eq" '(kill-this-buffer :wk "Kill this buffer")
                                       "ej" '(next-buffer :wk "Next buffer")
                                       "ek" '(previous-buffer :wk "Previous buffer")
                                       "er" '(revert-buffer :wk "Reload buffer")
                                       "w" '(:ignore t :wk "window")
                                       "wh" '(windmove-left :wk "Move to left window")
                                       "wl" '(windmove-right :wk "Move to right window")
                                       "wH" '(windmove-swap-states-left
                                              :wk "Swap window to the left")
                                       "wL" '(windmove-swap-states-right
                                              :wk "Swap window to the right")
                                       "ws" '(evil-window-split
                                              :wk "Split window horizontally")
                                       "wv" '(evil-window-vsplit
                                              :wk "Split window vertically")
                                       "wq" '(evil-quit
                                              :wk "Close window")))
#+end_src

* FONTS
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :font "Cascadia Mono"
                      :height 110
                      :weight 'medium)

  (set-face-attribute 'variable-pitch nil
                      :font "Cantarell"
                      :height 120
                      :weight 'medium)

  (set-face-attribute 'fixed-pitch nil
                      :font "Cascadia Mono"
                      :height 110
                      :weight 'medium)

  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)

  (set-face-attribute 'font-lock-keyword-face nil
                      :slant 'italic)

  (add-to-list 'default-frame-alist '(font . "Cascadia Mono-11"))
#+end_src

* GUI TWEAKS

** DISABLE STUFF
#+begin_src emacs-lisp
  (menu-bar-mode -1)

  (scroll-bar-mode -1)

  (tool-bar-mode -1)

  (setq visible-bell 1)

  (setq frame-resize-pixelwise t)
#+end_src

** LINE NUMBERS, TRUNCATING, AND INDENTATION
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)

  (add-hook 'org-mode-hook 'display-line-numbers-mode)

  (global-visual-line-mode t)

  (setq-default indent-tabs-mode nil)
#+end_src

** SMOOTH SCROLLING
#+begin_src emacs-lisp
  (setq redisplay-dont-pause t
        scroll-margin 500
        scroll-conservatively 10000
        scroll-preserve-screen-position 1)
#+end_src

** RAINBOW DELIMITERS
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
               :ensure t
               :config
               (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

* ORG MODE
#+begin_src emacs-lisp
  (use-package org
               :ensure t
               :mode (("\\.org$" . org-mode)))
#+end_src

** TABLE OF CONTENTS
#+begin_src emacs-lisp
  (use-package toc-org
               :commands toc-org-enable
               :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** ORG-BULLETS
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)

  (use-package org-bullets)

  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

* WHICH-KEY
#+begin_src emacs-lisp
  (use-package which-key
               :init
               (which-key-mode 1)
               :config
               (setq which-key-side-window-location 'bottom
                     which-key-sort-order #'which-key-key-order-alpha
                     which-key-sort-uppercase-first nil
                     which-key-add-column-padding 1
                     which-key-max-display-columns nil
                     which-key-min-display-lines 6
                     which-key-side-window-slot -10
                     which-key-side-window-max-height 0.25
                     which-key-idle-delay 0.8
                     which-key-max-description-length 25
                     which-key-allow-imprecise-window-fit t
                     which-key-separator " â†’ " ))
#+end_src

* LATEX

** AUCTEX
#+begin_src emacs-lisp
  (use-package auctex
               :ensure t
               :hook
               (LaTex-mode . turn-on-prettify-symbols-mode)
               (LaTex-mode . turn-on-flyspell))

  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-source-correlate-start-server t)

  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

  (add-hook 'LaTeX-mode-hook #'rainbow-delimiters-mode)

  (add-hook 'LaTeX-mode-hook 'display-line-numbers-mode)
#+end_src

** PDF-TOOLS
#+begin_src emacs-lisp
  (use-package pdf-tools
               :ensure t
               :init
               (pdf-tools-install))
#+end_src

* MISC 

** TRANSIENT MARK MODE
#+begin_src emacs-lisp
  (transient-mark-mode 1)  ; dont actually know what this does
#+end_src


** CATPPUCCIN THEME
#+begin_src emacs-lisp
  (use-package catppuccin-theme
               :ensure t
               :config
               (load-theme 'catppuccin :no-confirm))
#+end_src

** VTERM
#+begin_src emacs-lisp
  (setq initial-buffer-choice 'multi-vterm)
#+end_src

** NIX TREESITTER
#+begin_src emacs-lisp
  (use-package nix-ts-mode
               :ensure t
               :mode "\\.nix\\'")
#+end_src

** HIGHLIGHT INDENT GUIDES
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
               :ensure t
               :config
               (setq highlight-indent-guides-method 'character
                     highlight-indent-guides-character ?|))
               ;(set-face-background 'highlight-indent-guides-odd-face "darkgray")
               ;(set-face-background 'highlight-indent-guides-even-face "dimgray"))

  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)

  (add-hook 'org-mode-hook 'highlight-indent-guides-mode)
#+end_src

#+RESULTS:
| highlight-indent-guides-mode | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | (lambda nil (org-bullets-mode 1)) | org-indent-mode | toc-org-enable | display-line-numbers-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |
