#! /usr/bin/env bash

process_value () {

	value="${1//, /|}"

	readarray -t -d '|' list <<< "$value"

	bucket="";
	for i in ${!list[@]}; do
		if [[ ${list[$i]} =~ ^\[ ]]; then
		fi
		echo ${list[$i]}}
	done




	#echo "|$1|"
	#if [[ $1 =~ ^\[.*\]$ ]]; then

	#	printf '[ '

	#	list="${1:1:${#1}-2}"
	#	oldIFS=$IFS

	#	for value in ${list//, /$'\n'}; do
	#		process_value "$value"
	#		printf ' '
	#	done

	#	IFS=$oldIFS

	#	printf ']'

	#elif [[ $1 =~ ^\(.*\)$ ]]; then

	#	printf 'mkTuple [ '

	#	list="${1:1:${#1}-2}"
	#	oldIFS=$IFS
	#	for value in ${list//, /$'\n'}; do
	#		process_value "$value"
	#		printf ' '
	#	done
	#	IFS=$oldIFS

	#	printf ']'

	#else
	#	value="${1//\"/\\\"}"
	#	value="${value//\'/\"}"
	#	value="${value/@as /}"
	#	value="${value//int64/mkInt64}"
	#	printf '%s' "$value"
	#fi
}

handle_array () {
	echo temp
}

handle_tuple () {
	echo temp
}

printf '# generated by my nix-dconf script\n\n'
printf '{ lib, ... }:\n\nwith lib.hm.gvariant; {\n\n\tdconf.settings = {\n\n'

while read line; do

	if [[ $line =~ ^\[.*\]$ ]]; then
		printf '\t\t"%s" {\n' "${line:1:${#line}-2}"
	elif [[ $line = ""  ]]; then
		printf '\t\t};\n\n'
	else

		left_side="$(echo $line | cut -d '=' -f 2)"

		left_side="$(process_value "$left_side")"

		## format array
		#if [[ $left_side =~ ^\[.*\]$ ]]; then
		#	left_side="[ ${left_side:1:${#left_side}-2} ]"
		#	left_side="${left_side//,/}"
		#fi

		## format tuple
		#if [[ $left_side =~ ^\(.*\)$ ]]; then
		#	left_side="mkTuple [ ${left_side:1:${#left_side}-2} ]"
		#	left_side="${left_side//,/}"
		#fi

		## handle quotation marks
		#left_side="${left_side//\"/\\\"}"
		#left_side="${left_side//\'/\"}"

		## handle keybindings
		#left_side="${left_side/@as /}"

		## handle int64 
		#left_side="${left_side//int64/mkInt64}"

		printf '\t\t\t"%s" = %s;\n' "$(echo $line | cut -d '=' -f 1)" "$left_side"
				

	fi

done < /dev/stdin 

printf '\t\t};\n\n\t};\n\n};'
